{"ast":null,"code":"var _jsxFileName = \"/Users/zeynepbas/Documents/GitHub/my-react-app/client/src/component/Chart.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nimport ReactApexChart from \"react-apexcharts\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Charts = () => {\n  _s();\n  const [table, setTable] = useState([]);\n  const [dizi, setDizi] = useState([]);\n  const [series, setSeries] = useState([]);\n  const [serie, setSerie] = useState([]);\n  const fetchData = async () => {\n    try {\n      const response = await axios.get(\"http://localhost:9363/grup/panel\");\n      setTable(response.data);\n      const postaKodListesi = response.data.map(item => item.group);\n      const data = postaKodListesi.length;\n      const seriesData = [{\n        name: \"Group\",\n        data: [data]\n      }];\n      setSeries(seriesData);\n      setSerie(serieData);\n\n      // dizi state'ini güncelle\n      setDizi([...seriesData, ...serieData]);\n    } catch (error) {\n      console.error(\"Error fetching data:\", error);\n    }\n  };\n  useEffect(() => {\n    fetchData();\n  }, []);\n  const [options, setOptions] = useState({\n    chart: {\n      id: \"basic-bar\"\n    },\n    xaxis: {\n      categories: [\"Electronic Care\", \"Forklif\", \"Machine Care\"] // Başlangıçta boş olarak ayarlayın, veriler geldiğinde güncellenecek\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(ReactApexChart, {\n      options: options,\n      series: dizi,\n      type: \"area\",\n      height: 350\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 8\n    }, this)\n  }, void 0, false);\n};\n_s(Charts, \"U0g5o7qLvhV4CoU6V4b7/k6JHB8=\");\n_c = Charts;\nexport default Charts;\nvar _c;\n$RefreshReg$(_c, \"Charts\");","map":{"version":3,"names":["useState","useEffect","ReactApexChart","axios","jsxDEV","_jsxDEV","Fragment","_Fragment","Charts","_s","table","setTable","dizi","setDizi","series","setSeries","serie","setSerie","fetchData","response","get","data","postaKodListesi","map","item","group","length","seriesData","name","serieData","error","console","options","setOptions","chart","id","xaxis","categories","children","type","height","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/zeynepbas/Documents/GitHub/my-react-app/client/src/component/Chart.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\nimport ReactApexChart from \"react-apexcharts\";\nimport axios from \"axios\";\n\nconst Charts = () => {\n\n  const [table, setTable] = useState([]);\n  const [dizi, setDizi] = useState([]);\n  const [series, setSeries] = useState([]);\n  const [serie, setSerie] = useState([]);\n  const fetchData = async () => {\n    try {\n      const response = await axios.get(\"http://localhost:9363/grup/panel\");\n      setTable(response.data);\n\n      \n\n      const postaKodListesi = response.data.map(item => item.group);\n      const data=postaKodListesi.length;\n      const seriesData = [{ name: \"Group\", data: [data] }];\n     \n\n      setSeries(seriesData);\n      setSerie(serieData);\n\n      // dizi state'ini güncelle\n      setDizi([...seriesData, ...serieData]);\n\n    } catch (error) {\n      console.error(\"Error fetching data:\", error);\n    }\n  };\n\n  useEffect(() => {\n    fetchData();\n  }, []);\n\n  const [options, setOptions] = useState({\n    chart: {\n      id: \"basic-bar\"\n    },\n    xaxis: {\n      categories: [\"Electronic Care\",\"Forklif\", \"Machine Care\"] // Başlangıçta boş olarak ayarlayın, veriler geldiğinde güncellenecek\n    }\n  });\n\n\n\n  return (\n    <>\n       <ReactApexChart          options={options}\n              series={dizi} type=\"area\" height={350} />\n   \n    </>\n  );\n};\nexport default Charts;\n"],"mappings":";;AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,OAAOC,cAAc,MAAM,kBAAkB;AAC7C,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAE1B,MAAMC,MAAM,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAEnB,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACY,IAAI,EAAEC,OAAO,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;EACpC,MAAM,CAACc,MAAM,EAAEC,SAAS,CAAC,GAAGf,QAAQ,CAAC,EAAE,CAAC;EACxC,MAAM,CAACgB,KAAK,EAAEC,QAAQ,CAAC,GAAGjB,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAMkB,SAAS,GAAG,MAAAA,CAAA,KAAY;IAC5B,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMhB,KAAK,CAACiB,GAAG,CAAC,kCAAkC,CAAC;MACpET,QAAQ,CAACQ,QAAQ,CAACE,IAAI,CAAC;MAIvB,MAAMC,eAAe,GAAGH,QAAQ,CAACE,IAAI,CAACE,GAAG,CAACC,IAAI,IAAIA,IAAI,CAACC,KAAK,CAAC;MAC7D,MAAMJ,IAAI,GAACC,eAAe,CAACI,MAAM;MACjC,MAAMC,UAAU,GAAG,CAAC;QAAEC,IAAI,EAAE,OAAO;QAAEP,IAAI,EAAE,CAACA,IAAI;MAAE,CAAC,CAAC;MAGpDN,SAAS,CAACY,UAAU,CAAC;MACrBV,QAAQ,CAACY,SAAS,CAAC;;MAEnB;MACAhB,OAAO,CAAC,CAAC,GAAGc,UAAU,EAAE,GAAGE,SAAS,CAAC,CAAC;IAExC,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;IAC9C;EACF,CAAC;EAED7B,SAAS,CAAC,MAAM;IACdiB,SAAS,CAAC,CAAC;EACb,CAAC,EAAE,EAAE,CAAC;EAEN,MAAM,CAACc,OAAO,EAAEC,UAAU,CAAC,GAAGjC,QAAQ,CAAC;IACrCkC,KAAK,EAAE;MACLC,EAAE,EAAE;IACN,CAAC;IACDC,KAAK,EAAE;MACLC,UAAU,EAAE,CAAC,iBAAiB,EAAC,SAAS,EAAE,cAAc,CAAC,CAAC;IAC5D;EACF,CAAC,CAAC;EAIF,oBACEhC,OAAA,CAAAE,SAAA;IAAA+B,QAAA,eACGjC,OAAA,CAACH,cAAc;MAAU8B,OAAO,EAAEA,OAAQ;MACnClB,MAAM,EAAEF,IAAK;MAAC2B,IAAI,EAAC,MAAM;MAACC,MAAM,EAAE;IAAI;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE;EAAC,gBAEjD,CAAC;AAEP,CAAC;AAACnC,EAAA,CAnDID,MAAM;AAAAqC,EAAA,GAANrC,MAAM;AAoDZ,eAAeA,MAAM;AAAC,IAAAqC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}