{"ast":null,"code":"var _jsxFileName = \"/Users/zeynepbas/Desktop/my-react-app/client/src/component/TableTwo.tsx\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nimport Chart from \"react-apexcharts\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst TableTwo = () => {\n  _s();\n  const [data, setData] = useState([]);\n  const [table, setTable] = useState([]);\n  const fetchData = async () => {\n    try {\n      const response = await axios.get(\"http://localhost:9363/post/panel\");\n      setTable(response.data);\n      setData(response.data);\n\n      // response nesnesi veya kullaniciAd özelliği tanımlı mı diye kontrol et\n      if (response.data && response.data.kullaniciAd) {\n        // Kullanıcı adlarını sıralamak için\n        const sortedCategories = response.data.kullaniciAd.sort();\n\n        // options içerisindeki categories'i güncellemek için\n        setOptions(prevOptions => ({\n          ...prevOptions,\n          xaxis: {\n            ...prevOptions.xaxis,\n            categories: sortedCategories\n          }\n        }));\n      }\n    } catch (error) {\n      console.error(\"Error fetching data:\", error);\n    }\n  };\n  useEffect(() => {\n    fetchData();\n  }, []);\n  const [options, setOptions] = useState({\n    chart: {\n      id: \"basic-bar\"\n    },\n    xaxis: {\n      categories: [1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999]\n    }\n  });\n  const [series, setSeries] = useState([{\n    name: \"series-1\",\n    data: [30, 40, 45, 50, 49, 60, 70, 91]\n  }]);\n  let totalDataCount = table.length;\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Chart, {\n      options: options,\n      series: series,\n      type: \"bar\",\n      width: \"500\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n};\n_s(TableTwo, \"yYuWMepQcz4NtKedxH8eqdxqUzE=\");\n_c = TableTwo;\nexport default TableTwo;\nvar _c;\n$RefreshReg$(_c, \"TableTwo\");","map":{"version":3,"names":["useState","useEffect","Chart","axios","jsxDEV","_jsxDEV","Fragment","_Fragment","TableTwo","_s","data","setData","table","setTable","fetchData","response","get","kullaniciAd","sortedCategories","sort","setOptions","prevOptions","xaxis","categories","error","console","options","chart","id","series","setSeries","name","totalDataCount","length","children","type","width","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/zeynepbas/Desktop/my-react-app/client/src/component/TableTwo.tsx"],"sourcesContent":["import { useState, useEffect } from \"react\";\nimport { TodoType } from \"./todo\";\nimport Chart from \"react-apexcharts\";\nimport axios from \"axios\";\n\nconst TableTwo = () => {\n  const [data, setData] = useState<TodoType[]>([]);\n  const [table, setTable] = useState<TodoType[]>([]);\n  const fetchData = async () => {\n    try {\n      const response = await axios.get(\"http://localhost:9363/post/panel\");\n      setTable(response.data);\n      setData(response.data);\n  \n      // response nesnesi veya kullaniciAd özelliği tanımlı mı diye kontrol et\n      if (response.data && response.data.kullaniciAd) {\n        // Kullanıcı adlarını sıralamak için\n        const sortedCategories = response.data.kullaniciAd.sort();\n  \n        // options içerisindeki categories'i güncellemek için\n        setOptions(prevOptions => ({\n          ...prevOptions,\n          xaxis: {\n            ...prevOptions.xaxis,\n            categories: sortedCategories\n          }\n        }));\n      }\n  \n    } catch (error) {\n      console.error(\"Error fetching data:\", error);\n    }\n  };\n  \n  useEffect(() => {\n    fetchData();\n  }, []);\n\n  const [options, setOptions] = useState({\n    chart: {\n      id: \"basic-bar\"\n    },\n    xaxis: {\n      categories: [1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999]\n    }\n  });\n\n  const [series, setSeries] = useState([\n    {\n      name: \"series-1\",\n      data: [30, 40, 45, 50, 49, 60, 70, 91]\n    }\n  ]);\n\n \n  let totalDataCount: number = table.length;\n  return (\n    <>\n        <Chart\n              options={options}\n              series={series}\n              type=\"bar\"\n              width=\"500\"\n            />\n    </>\n  );\n};\nexport default TableTwo;\n"],"mappings":";;AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAE3C,OAAOC,KAAK,MAAM,kBAAkB;AACpC,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAE1B,MAAMC,QAAQ,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACrB,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGX,QAAQ,CAAa,EAAE,CAAC;EAChD,MAAM,CAACY,KAAK,EAAEC,QAAQ,CAAC,GAAGb,QAAQ,CAAa,EAAE,CAAC;EAClD,MAAMc,SAAS,GAAG,MAAAA,CAAA,KAAY;IAC5B,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMZ,KAAK,CAACa,GAAG,CAAC,kCAAkC,CAAC;MACpEH,QAAQ,CAACE,QAAQ,CAACL,IAAI,CAAC;MACvBC,OAAO,CAACI,QAAQ,CAACL,IAAI,CAAC;;MAEtB;MACA,IAAIK,QAAQ,CAACL,IAAI,IAAIK,QAAQ,CAACL,IAAI,CAACO,WAAW,EAAE;QAC9C;QACA,MAAMC,gBAAgB,GAAGH,QAAQ,CAACL,IAAI,CAACO,WAAW,CAACE,IAAI,CAAC,CAAC;;QAEzD;QACAC,UAAU,CAACC,WAAW,KAAK;UACzB,GAAGA,WAAW;UACdC,KAAK,EAAE;YACL,GAAGD,WAAW,CAACC,KAAK;YACpBC,UAAU,EAAEL;UACd;QACF,CAAC,CAAC,CAAC;MACL;IAEF,CAAC,CAAC,OAAOM,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;IAC9C;EACF,CAAC;EAEDvB,SAAS,CAAC,MAAM;IACda,SAAS,CAAC,CAAC;EACb,CAAC,EAAE,EAAE,CAAC;EAEN,MAAM,CAACY,OAAO,EAAEN,UAAU,CAAC,GAAGpB,QAAQ,CAAC;IACrC2B,KAAK,EAAE;MACLC,EAAE,EAAE;IACN,CAAC;IACDN,KAAK,EAAE;MACLC,UAAU,EAAE,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI;IACnE;EACF,CAAC,CAAC;EAEF,MAAM,CAACM,MAAM,EAAEC,SAAS,CAAC,GAAG9B,QAAQ,CAAC,CACnC;IACE+B,IAAI,EAAE,UAAU;IAChBrB,IAAI,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE;EACvC,CAAC,CACF,CAAC;EAGF,IAAIsB,cAAsB,GAAGpB,KAAK,CAACqB,MAAM;EACzC,oBACE5B,OAAA,CAAAE,SAAA;IAAA2B,QAAA,eACI7B,OAAA,CAACH,KAAK;MACAwB,OAAO,EAAEA,OAAQ;MACjBG,MAAM,EAAEA,MAAO;MACfM,IAAI,EAAC,KAAK;MACVC,KAAK,EAAC;IAAK;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACZ;EAAC,gBACR,CAAC;AAEP,CAAC;AAAC/B,EAAA,CA7DID,QAAQ;AAAAiC,EAAA,GAARjC,QAAQ;AA8Dd,eAAeA,QAAQ;AAAC,IAAAiC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}