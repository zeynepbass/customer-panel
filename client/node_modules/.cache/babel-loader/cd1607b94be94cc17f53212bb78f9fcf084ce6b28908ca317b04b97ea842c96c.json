{"ast":null,"code":"var _jsxFileName = \"/Users/zeynepbas/Desktop/my-react-app/client/src/component/TableTwo.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nimport Chart from \"react-apexcharts\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst TableTwo = () => {\n  _s();\n  const [data, setData] = useState([]);\n  const [table, setTable] = useState([]);\n  const fetchData = async () => {\n    try {\n      const response = await axios.get(\"http://localhost:9363/post/panel\");\n      setTable(response.data);\n      setData(response.data);\n\n      // Kullanıcı adları ve posta kodlarını alarak options ve series'i güncelle\n\n      const postaKodListesi = response.data.map(item => item.postaCode);\n      const postaKodListesiUzunluk = postaKodListesi.length;\n      setSeries([{\n        data: postaKodListesiUzunluk\n      }]);\n    } catch (error) {\n      console.error(\"Error fetching data:\", error);\n    }\n  };\n  useEffect(() => {\n    fetchData();\n  }, []);\n  const [options, setOptions] = useState({\n    chart: {\n      id: \"basic-bar\"\n    },\n    xaxis: {\n      categories: [\"FirstName\", \"Posta Code\"] // Başlangıçta boş olarak ayarlayın, veriler geldiğinde güncellenecek\n    }\n  });\n  const [series, setSeries] = useState([]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Chart, {\n      options: options,\n      series: series,\n      type: \"bar\",\n      width: \"500\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n};\n_s(TableTwo, \"gUsup7MCxRpp0EOEYVCeOc6Goio=\");\n_c = TableTwo;\nexport default TableTwo;\nvar _c;\n$RefreshReg$(_c, \"TableTwo\");","map":{"version":3,"names":["useState","useEffect","Chart","axios","jsxDEV","_jsxDEV","Fragment","_Fragment","TableTwo","_s","data","setData","table","setTable","fetchData","response","get","postaKodListesi","map","item","postaCode","postaKodListesiUzunluk","length","setSeries","error","console","options","setOptions","chart","id","xaxis","categories","series","children","type","width","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/zeynepbas/Desktop/my-react-app/client/src/component/TableTwo.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\nimport Chart from \"react-apexcharts\";\nimport axios from \"axios\";\n\nconst TableTwo = () => {\n  const [data, setData] = useState([]);\n  const [table, setTable] = useState([]);\n\n  const fetchData = async () => {\n    try {\n      const response = await axios.get(\"http://localhost:9363/post/panel\");\n      setTable(response.data);\n      setData(response.data);\n      \n      // Kullanıcı adları ve posta kodlarını alarak options ve series'i güncelle\n     \n      const postaKodListesi = response.data.map(item => item.postaCode);\n      const postaKodListesiUzunluk = postaKodListesi.length;\n\n      setSeries([{  data: postaKodListesiUzunluk }]);\n    } catch (error) {\n      console.error(\"Error fetching data:\", error);\n    }\n  };\n\n  useEffect(() => {\n    fetchData();\n  }, []);\n\n  const [options, setOptions] = useState({\n    chart: {\n      id: \"basic-bar\"\n    },\n    xaxis: {\n      categories: [\"FirstName\",\"Posta Code\"] // Başlangıçta boş olarak ayarlayın, veriler geldiğinde güncellenecek\n    }\n  });\n\n\n  const [series, setSeries] = useState([]);\n\n \n\n  return (\n    <>\n        <Chart\n              options={options}\n              series={series}\n              type=\"bar\"\n              width=\"500\"\n            />\n    </>\n  );\n};\nexport default TableTwo;\n"],"mappings":";;AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,OAAOC,KAAK,MAAM,kBAAkB;AACpC,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAE1B,MAAMC,QAAQ,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACrB,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EACpC,MAAM,CAACY,KAAK,EAAEC,QAAQ,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;EAEtC,MAAMc,SAAS,GAAG,MAAAA,CAAA,KAAY;IAC5B,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMZ,KAAK,CAACa,GAAG,CAAC,kCAAkC,CAAC;MACpEH,QAAQ,CAACE,QAAQ,CAACL,IAAI,CAAC;MACvBC,OAAO,CAACI,QAAQ,CAACL,IAAI,CAAC;;MAEtB;;MAEA,MAAMO,eAAe,GAAGF,QAAQ,CAACL,IAAI,CAACQ,GAAG,CAACC,IAAI,IAAIA,IAAI,CAACC,SAAS,CAAC;MACjE,MAAMC,sBAAsB,GAAGJ,eAAe,CAACK,MAAM;MAErDC,SAAS,CAAC,CAAC;QAAGb,IAAI,EAAEW;MAAuB,CAAC,CAAC,CAAC;IAChD,CAAC,CAAC,OAAOG,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;IAC9C;EACF,CAAC;EAEDvB,SAAS,CAAC,MAAM;IACda,SAAS,CAAC,CAAC;EACb,CAAC,EAAE,EAAE,CAAC;EAEN,MAAM,CAACY,OAAO,EAAEC,UAAU,CAAC,GAAG3B,QAAQ,CAAC;IACrC4B,KAAK,EAAE;MACLC,EAAE,EAAE;IACN,CAAC;IACDC,KAAK,EAAE;MACLC,UAAU,EAAE,CAAC,WAAW,EAAC,YAAY,CAAC,CAAC;IACzC;EACF,CAAC,CAAC;EAGF,MAAM,CAACC,MAAM,EAAET,SAAS,CAAC,GAAGvB,QAAQ,CAAC,EAAE,CAAC;EAIxC,oBACEK,OAAA,CAAAE,SAAA;IAAA0B,QAAA,eACI5B,OAAA,CAACH,KAAK;MACAwB,OAAO,EAAEA,OAAQ;MACjBM,MAAM,EAAEA,MAAO;MACfE,IAAI,EAAC,KAAK;MACVC,KAAK,EAAC;IAAK;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACZ;EAAC,gBACR,CAAC;AAEP,CAAC;AAAC9B,EAAA,CAjDID,QAAQ;AAAAgC,EAAA,GAARhC,QAAQ;AAkDd,eAAeA,QAAQ;AAAC,IAAAgC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}